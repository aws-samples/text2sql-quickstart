AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for Text2SQL with EC2, Redshift, and OpenSearch

Parameters:
  MasterUserPassword:
    Type: String
    Description: Master password for Redshift cluster
    NoEcho: true
  OpenSearchMasterPassword:
    Type: String
    Description: Master password for OpenSearch domain
    NoEcho: true
  EC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
  DatabaseName:
    Type: String
    Default: text2sql
    Description: Name of the Redshift database
  MasterUsername:
    Type: String
    Default: admin
    Description: Master username for Redshift cluster
  OpenSearchMasterUsername:
    Type: String
    Default: admin
    Description: Master username for OpenSearch domain
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
    Description: Latest Amazon Linux 2023 AMI from SSM Parameter Store

Resources:
  Text2SQLVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Text2SQLVPC
      CidrBlock: 10.0.0.0/26
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Sub "${AWS::Region}a"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Text2SQLVPC
      CidrBlock: 10.0.0.192/26  # 기존 10.0.0.0/26과 겹치지 않게
      AvailabilityZone: !Sub "${AWS::Region}b"  # 두 번째 AZ
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Text2SQLVPC
      CidrBlock: 10.0.0.64/26
      AvailabilityZone: !Sub "${AWS::Region}a"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref Text2SQLVPC
      CidrBlock: 10.0.0.128/26
      AvailabilityZone: !Sub "${AWS::Region}b"

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1  # 퍼블릭 서브넷에 배치
      AllocationId: !GetAtt EIP.AllocationId

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Text2SQLVPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1  # EC2와 Redshift가 공유
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2  # Redshift용
      RouteTableId: !Ref PrivateRouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Text2SQLVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Text2SQLVPC

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  RedshiftSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Redshift cluster
      VpcId: !Ref Text2SQLVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5439
          ToPort: 5439
          SourceSecurityGroupId: !Ref EC2SecurityGroup  # EC2에서만 접근

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for EC2 instance with Streamlit
      VpcId: !Ref Text2SQLVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0  # SSH는 임시로 개방, 나중에 제한 가능
        - IpProtocol: tcp
          FromPort: 8501
          ToPort: 8501
          SourceSecurityGroupId: !Ref ALBSecurityGroup  # ALB만 허용
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "text2sql-EC2Role-${AWS::StackName}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "bedrock:*"
                Resource: "*"
        - PolicyName: OpenSearchPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "es:*"
                Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/text2sql-${AWS::StackName}"
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "s3:*"
                Resource:
                  - !Sub "arn:aws:s3:::text2sql-synonyms-${AWS::AccountId}"
                  - !Sub "arn:aws:s3:::text2sql-synonyms-${AWS::AccountId}/*"
        - PolicyName: SSMAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "ssm:*"
                Resource: "*"
        - PolicyName: CloudWatchAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: "*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [!Ref EC2Role]

  RedshiftCluster:
    Type: AWS::Redshift::Cluster
    Properties:
      ClusterType: single-node
      NodeType: dc2.large
      NumberOfNodes: 1
      DBName: !Ref DatabaseName
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      VpcSecurityGroupIds: [!Ref RedshiftSecurityGroup]
      ClusterSubnetGroupName: !Ref RedshiftSubnetGroup

  RedshiftSubnetGroup:
    Type: AWS::Redshift::ClusterSubnetGroup
    Properties:
      Description: Subnet group for Redshift cluster
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  OpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      EngineVersion: "OpenSearch_2.11"
      ClusterConfig:
        InstanceType: t3.small.search
        InstanceCount: 1
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp3
      AccessPolicies:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: "es:*"
            Resource: !Sub "arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/text2sql-${AWS::StackName}/*"
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: !Ref OpenSearchMasterUsername
          MasterUserPassword: !Ref OpenSearchMasterPassword
      NodeToNodeEncryptionOptions:
        Enabled: true
      EncryptionAtRestOptions:
        Enabled: true
      DomainEndpointOptions:
        EnforceHTTPS: true
      DomainName: !Sub "text2sql-${AWS::StackName}"

  SSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref Text2SQLVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref EC2SecurityGroup

  SynonymsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "text2sql-synonyms-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: ExpireOldFiles
            Status: Enabled
            ExpirationInDays: 365

  SynonymsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SynonymsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub "arn:aws:iam::${AWS::AccountId}:root"
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
            Resource: !Sub "arn:aws:s3:::${SynonymsBucket}/*"

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId: !Ref Text2SQLVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing

  TargetGroup:
      Type: AWS::ElasticLoadBalancingV2::TargetGroup
      DependsOn: EC2Instance  # EC2가 먼저 생성되도록
      Properties:
        VpcId: !Ref Text2SQLVPC
        Port: 8501
        Protocol: HTTP
        TargetType: instance
        HealthCheckPath: /
        HealthCheckPort: 8501
        HealthCheckProtocol: HTTP
        Targets:  # 추가
          - Id: !Ref EC2Instance  # EC2 인스턴스 ID 참조
            Port: 8501

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn:
      - RedshiftCluster
      - OpenSearchDomain
    Properties:
      InstanceType: t3.micro
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PrivateSubnet1  # PrivateSubnetEC2 대신 PrivateSubnet1 사용
      SecurityGroupIds: [!Ref EC2SecurityGroup]
      KeyName: !Ref EC2KeyPair
      IamInstanceProfile: !Ref EC2InstanceProfile
      Tags:
      - Key: Name
        Value: !Sub "Text2SQL-EC2-${AWS::StackName}"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          touch /var/log/userdata.log
          chmod 666 /var/log/userdata.log
          echo "Starting UserData script" > /var/log/userdata.log
          for i in {1..30}; do
            if curl -Is https://github.com >/dev/null 2>&1; then
              echo "Network is up" >> /var/log/userdata.log
              break
            fi
            echo "Waiting for network... ($i/30)" >> /var/log/userdata.log
            sleep 1
          done
          sudo dnf clean all >> /var/log/userdata.log 2>&1
          sudo dnf update -y >> /var/log/userdata.log 2>&1 || echo "dnf update failed" >> /var/log/userdata.log
          sudo dnf install -y python3 python3-pip git >> /var/log/userdata.log 2>&1 || echo "dnf install failed" >> /var/log/userdata.log
          mkdir -p /home/ec2-user/text2sql-quickstart
          chown ec2-user:ec2-user /home/ec2-user/text2sql-quickstart
          cd /home/ec2-user
          git clone https://github.com/aws-samples/text2sql-quickstart.git >> /var/log/userdata.log 2>&1 || echo "git clone failed" >> /var/log/userdata.log
          cd text2sql-quickstart
          /usr/bin/pip3 install -r requirements.txt --user >> /var/log/userdata.log 2>&1 || echo "pip install failed" >> /var/log/userdata.log
          # .env 파일을 새로 생성 (덮어쓰기)
          cat > .env << EOF
          OPENSEARCH_HOST=${OpenSearchDomain.DomainEndpoint}
          OPENSEARCH_USERNAME=${OpenSearchMasterUsername}
          OPENSEARCH_PASSWORD=${OpenSearchMasterPassword}
          OPENSEARCH_DOMAIN=text2sql-${AWS::StackName}
          REDSHIFT_HOST=${RedshiftCluster.Endpoint.Address}
          REDSHIFT_DATABASE=${DatabaseName}
          REDSHIFT_USERNAME=${MasterUsername}
          REDSHIFT_PASSWORD=${MasterUserPassword}
          EOF
          echo "Starting Streamlit" >> /var/log/userdata.log
          nohup /usr/bin/python3 -m streamlit run app.py --server.port 8501 >> /var/log/userdata.log 2>&1 &
          echo "UserData script completed" >> /var/log/userdata.log

Outputs:
  RedshiftEndpoint:
    Description: Endpoint of the Redshift cluster
    Value: !GetAtt RedshiftCluster.Endpoint.Address
  RedshiftDatabaseName:
    Description: Name of the Redshift database
    Value: !Ref DatabaseName
  RedshiftUsername:
    Description: Master username for Redshift cluster
    Value: !Ref MasterUsername
  OpenSearchEndpoint:
    Description: Endpoint of the OpenSearch domain
    Value: !GetAtt OpenSearchDomain.DomainEndpoint
  OpenSearchUsername:
    Description: Master username for OpenSearch domain
    Value: !Ref OpenSearchMasterUsername
  LoadBalancerDNS:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName